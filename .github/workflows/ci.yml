name: ci-tests

on:
  # push:
  # branches: [ main ]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: actions/setup-python@v3
      - name: Install dependencies
        run: |
          python -m pip install pre-commit
          python -m pip freeze --local
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run pre-commit checks
        run: pre-commit run --show-diff-on-failure --color=always --from-ref HEAD^ --to-ref HEAD
        shell: bash
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test of these containers
        container: ["ubuntu-dev:20", "alpine-dev:latest"]
        build-type: [Debug, Release]
    timeout-minutes: 30
    container:
      image: ghcr.io/romange/${{ matrix.container }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install dependencies
        run: |
          uname -a
          cmake --version
          mkdir -p ${{github.workspace}}/build
      - name: Cache build deps
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{github.workspace}}/build/_deps
          key: ${{ runner.os }}-deps-${{ github.base_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ github.base_ref }}-

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cd ${{github.workspace}}/build && pwd
          du -hcs _deps/
      - name: Build & Test
        run: |
          cd ${{github.workspace}}/build
          ninja src/all
          ccache --show-stats
          echo Run ctest -V -L DFLY
          GLOG_logtostderr=1 GLOG_vmodule=transaction=1,engine_shard_set=1 ./tiered_storage_test
          GLOG_logtostderr=1 GLOG_vmodule=rdb_load=1,rdb_save=1,snapshot=1 ctest -V -L DFLY
          ./dragonfly_test  --gtest_repeat=10
          ./multi_test --multi_exec_mode=2 --gtest_repeat=10
          ./multi_test --multi_exec_mode=3 --gtest_repeat=10
          # GLOG_logtostderr=1 GLOG_vmodule=transaction=1,engine_shard_set=1 CTEST_OUTPUT_ON_FAILURE=1 ninja server/test
  lint-test-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Chart Rendering Tests
        run: |
          go test -v ./contrib/charts/dragonfly/...

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.3.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --config .ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi

      - name: Run chart-testing (lint)
        run: |
          ct \
            lint \
            --config .ct.yaml \
            ${{github.event_name == 'workflow_dispatch' && '--all'}} ;

      - if: steps.list-changed.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        name: Create kind cluster
        uses: helm/kind-action@v1.5.0

      - name: Run chart-testing (install)
        run: |
          ct \
            install \
            --config .ct.yaml \
            --debug \
            --helm-extra-set-args "--set=image.repository=ghcr.io/${{ github.repository }},probes=null" \
            ${{github.event_name == 'workflow_dispatch' && '--all'}} ;
